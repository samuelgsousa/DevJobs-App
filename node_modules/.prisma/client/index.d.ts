
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model requisitos
 * 
 */
export type requisitos = $Result.DefaultSelection<Prisma.$requisitosPayload>
/**
 * Model vagas
 * 
 */
export type vagas = $Result.DefaultSelection<Prisma.$vagasPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Requisitos
 * const requisitos = await prisma.requisitos.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Requisitos
   * const requisitos = await prisma.requisitos.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.requisitos`: Exposes CRUD operations for the **requisitos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Requisitos
    * const requisitos = await prisma.requisitos.findMany()
    * ```
    */
  get requisitos(): Prisma.requisitosDelegate<ExtArgs>;

  /**
   * `prisma.vagas`: Exposes CRUD operations for the **vagas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vagases
    * const vagases = await prisma.vagas.findMany()
    * ```
    */
  get vagas(): Prisma.vagasDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    requisitos: 'requisitos',
    vagas: 'vagas'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'requisitos' | 'vagas'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      requisitos: {
        payload: Prisma.$requisitosPayload<ExtArgs>
        fields: Prisma.requisitosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.requisitosFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.requisitosFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload>
          }
          findFirst: {
            args: Prisma.requisitosFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.requisitosFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload>
          }
          findMany: {
            args: Prisma.requisitosFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload>[]
          }
          create: {
            args: Prisma.requisitosCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload>
          }
          createMany: {
            args: Prisma.requisitosCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.requisitosDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload>
          }
          update: {
            args: Prisma.requisitosUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload>
          }
          deleteMany: {
            args: Prisma.requisitosDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.requisitosUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.requisitosUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$requisitosPayload>
          }
          aggregate: {
            args: Prisma.RequisitosAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRequisitos>
          }
          groupBy: {
            args: Prisma.requisitosGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RequisitosGroupByOutputType>[]
          }
          count: {
            args: Prisma.requisitosCountArgs<ExtArgs>,
            result: $Utils.Optional<RequisitosCountAggregateOutputType> | number
          }
        }
      }
      vagas: {
        payload: Prisma.$vagasPayload<ExtArgs>
        fields: Prisma.vagasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.vagasFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.vagasFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload>
          }
          findFirst: {
            args: Prisma.vagasFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.vagasFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload>
          }
          findMany: {
            args: Prisma.vagasFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload>[]
          }
          create: {
            args: Prisma.vagasCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload>
          }
          createMany: {
            args: Prisma.vagasCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.vagasDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload>
          }
          update: {
            args: Prisma.vagasUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload>
          }
          deleteMany: {
            args: Prisma.vagasDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.vagasUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.vagasUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$vagasPayload>
          }
          aggregate: {
            args: Prisma.VagasAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVagas>
          }
          groupBy: {
            args: Prisma.vagasGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VagasGroupByOutputType>[]
          }
          count: {
            args: Prisma.vagasCountArgs<ExtArgs>,
            result: $Utils.Optional<VagasCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type VagasCountOutputType
   */

  export type VagasCountOutputType = {
    requisitos: number
  }

  export type VagasCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requisitos?: boolean | VagasCountOutputTypeCountRequisitosArgs
  }

  // Custom InputTypes
  /**
   * VagasCountOutputType without action
   */
  export type VagasCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VagasCountOutputType
     */
    select?: VagasCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VagasCountOutputType without action
   */
  export type VagasCountOutputTypeCountRequisitosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: requisitosWhereInput
  }


  /**
   * Models
   */

  /**
   * Model requisitos
   */

  export type AggregateRequisitos = {
    _count: RequisitosCountAggregateOutputType | null
    _avg: RequisitosAvgAggregateOutputType | null
    _sum: RequisitosSumAggregateOutputType | null
    _min: RequisitosMinAggregateOutputType | null
    _max: RequisitosMaxAggregateOutputType | null
  }

  export type RequisitosAvgAggregateOutputType = {
    id: number | null
    vaga_id: number | null
  }

  export type RequisitosSumAggregateOutputType = {
    id: number | null
    vaga_id: number | null
  }

  export type RequisitosMinAggregateOutputType = {
    id: number | null
    vaga_id: number | null
    requisito: string | null
  }

  export type RequisitosMaxAggregateOutputType = {
    id: number | null
    vaga_id: number | null
    requisito: string | null
  }

  export type RequisitosCountAggregateOutputType = {
    id: number
    vaga_id: number
    requisito: number
    _all: number
  }


  export type RequisitosAvgAggregateInputType = {
    id?: true
    vaga_id?: true
  }

  export type RequisitosSumAggregateInputType = {
    id?: true
    vaga_id?: true
  }

  export type RequisitosMinAggregateInputType = {
    id?: true
    vaga_id?: true
    requisito?: true
  }

  export type RequisitosMaxAggregateInputType = {
    id?: true
    vaga_id?: true
    requisito?: true
  }

  export type RequisitosCountAggregateInputType = {
    id?: true
    vaga_id?: true
    requisito?: true
    _all?: true
  }

  export type RequisitosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which requisitos to aggregate.
     */
    where?: requisitosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requisitos to fetch.
     */
    orderBy?: requisitosOrderByWithRelationInput | requisitosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: requisitosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requisitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requisitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned requisitos
    **/
    _count?: true | RequisitosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RequisitosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RequisitosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RequisitosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RequisitosMaxAggregateInputType
  }

  export type GetRequisitosAggregateType<T extends RequisitosAggregateArgs> = {
        [P in keyof T & keyof AggregateRequisitos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRequisitos[P]>
      : GetScalarType<T[P], AggregateRequisitos[P]>
  }




  export type requisitosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: requisitosWhereInput
    orderBy?: requisitosOrderByWithAggregationInput | requisitosOrderByWithAggregationInput[]
    by: RequisitosScalarFieldEnum[] | RequisitosScalarFieldEnum
    having?: requisitosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RequisitosCountAggregateInputType | true
    _avg?: RequisitosAvgAggregateInputType
    _sum?: RequisitosSumAggregateInputType
    _min?: RequisitosMinAggregateInputType
    _max?: RequisitosMaxAggregateInputType
  }

  export type RequisitosGroupByOutputType = {
    id: number
    vaga_id: number | null
    requisito: string | null
    _count: RequisitosCountAggregateOutputType | null
    _avg: RequisitosAvgAggregateOutputType | null
    _sum: RequisitosSumAggregateOutputType | null
    _min: RequisitosMinAggregateOutputType | null
    _max: RequisitosMaxAggregateOutputType | null
  }

  type GetRequisitosGroupByPayload<T extends requisitosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RequisitosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RequisitosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RequisitosGroupByOutputType[P]>
            : GetScalarType<T[P], RequisitosGroupByOutputType[P]>
        }
      >
    >


  export type requisitosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    vaga_id?: boolean
    requisito?: boolean
    vagas?: boolean | requisitos$vagasArgs<ExtArgs>
  }, ExtArgs["result"]["requisitos"]>

  export type requisitosSelectScalar = {
    id?: boolean
    vaga_id?: boolean
    requisito?: boolean
  }


  export type requisitosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vagas?: boolean | requisitos$vagasArgs<ExtArgs>
  }


  export type $requisitosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "requisitos"
    objects: {
      vagas: Prisma.$vagasPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      vaga_id: number | null
      requisito: string | null
    }, ExtArgs["result"]["requisitos"]>
    composites: {}
  }


  type requisitosGetPayload<S extends boolean | null | undefined | requisitosDefaultArgs> = $Result.GetResult<Prisma.$requisitosPayload, S>

  type requisitosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<requisitosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RequisitosCountAggregateInputType | true
    }

  export interface requisitosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['requisitos'], meta: { name: 'requisitos' } }
    /**
     * Find zero or one Requisitos that matches the filter.
     * @param {requisitosFindUniqueArgs} args - Arguments to find a Requisitos
     * @example
     * // Get one Requisitos
     * const requisitos = await prisma.requisitos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends requisitosFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, requisitosFindUniqueArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Requisitos that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {requisitosFindUniqueOrThrowArgs} args - Arguments to find a Requisitos
     * @example
     * // Get one Requisitos
     * const requisitos = await prisma.requisitos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends requisitosFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, requisitosFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Requisitos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requisitosFindFirstArgs} args - Arguments to find a Requisitos
     * @example
     * // Get one Requisitos
     * const requisitos = await prisma.requisitos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends requisitosFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, requisitosFindFirstArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Requisitos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requisitosFindFirstOrThrowArgs} args - Arguments to find a Requisitos
     * @example
     * // Get one Requisitos
     * const requisitos = await prisma.requisitos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends requisitosFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, requisitosFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Requisitos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requisitosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Requisitos
     * const requisitos = await prisma.requisitos.findMany()
     * 
     * // Get first 10 Requisitos
     * const requisitos = await prisma.requisitos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const requisitosWithIdOnly = await prisma.requisitos.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends requisitosFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, requisitosFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Requisitos.
     * @param {requisitosCreateArgs} args - Arguments to create a Requisitos.
     * @example
     * // Create one Requisitos
     * const Requisitos = await prisma.requisitos.create({
     *   data: {
     *     // ... data to create a Requisitos
     *   }
     * })
     * 
    **/
    create<T extends requisitosCreateArgs<ExtArgs>>(
      args: SelectSubset<T, requisitosCreateArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Requisitos.
     *     @param {requisitosCreateManyArgs} args - Arguments to create many Requisitos.
     *     @example
     *     // Create many Requisitos
     *     const requisitos = await prisma.requisitos.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends requisitosCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, requisitosCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Requisitos.
     * @param {requisitosDeleteArgs} args - Arguments to delete one Requisitos.
     * @example
     * // Delete one Requisitos
     * const Requisitos = await prisma.requisitos.delete({
     *   where: {
     *     // ... filter to delete one Requisitos
     *   }
     * })
     * 
    **/
    delete<T extends requisitosDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, requisitosDeleteArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Requisitos.
     * @param {requisitosUpdateArgs} args - Arguments to update one Requisitos.
     * @example
     * // Update one Requisitos
     * const requisitos = await prisma.requisitos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends requisitosUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, requisitosUpdateArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Requisitos.
     * @param {requisitosDeleteManyArgs} args - Arguments to filter Requisitos to delete.
     * @example
     * // Delete a few Requisitos
     * const { count } = await prisma.requisitos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends requisitosDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, requisitosDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Requisitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requisitosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Requisitos
     * const requisitos = await prisma.requisitos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends requisitosUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, requisitosUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Requisitos.
     * @param {requisitosUpsertArgs} args - Arguments to update or create a Requisitos.
     * @example
     * // Update or create a Requisitos
     * const requisitos = await prisma.requisitos.upsert({
     *   create: {
     *     // ... data to create a Requisitos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Requisitos we want to update
     *   }
     * })
    **/
    upsert<T extends requisitosUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, requisitosUpsertArgs<ExtArgs>>
    ): Prisma__requisitosClient<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Requisitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requisitosCountArgs} args - Arguments to filter Requisitos to count.
     * @example
     * // Count the number of Requisitos
     * const count = await prisma.requisitos.count({
     *   where: {
     *     // ... the filter for the Requisitos we want to count
     *   }
     * })
    **/
    count<T extends requisitosCountArgs>(
      args?: Subset<T, requisitosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RequisitosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Requisitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RequisitosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RequisitosAggregateArgs>(args: Subset<T, RequisitosAggregateArgs>): Prisma.PrismaPromise<GetRequisitosAggregateType<T>>

    /**
     * Group by Requisitos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {requisitosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends requisitosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: requisitosGroupByArgs['orderBy'] }
        : { orderBy?: requisitosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, requisitosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRequisitosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the requisitos model
   */
  readonly fields: requisitosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for requisitos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__requisitosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    vagas<T extends requisitos$vagasArgs<ExtArgs> = {}>(args?: Subset<T, requisitos$vagasArgs<ExtArgs>>): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the requisitos model
   */ 
  interface requisitosFieldRefs {
    readonly id: FieldRef<"requisitos", 'Int'>
    readonly vaga_id: FieldRef<"requisitos", 'Int'>
    readonly requisito: FieldRef<"requisitos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * requisitos findUnique
   */
  export type requisitosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * Filter, which requisitos to fetch.
     */
    where: requisitosWhereUniqueInput
  }

  /**
   * requisitos findUniqueOrThrow
   */
  export type requisitosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * Filter, which requisitos to fetch.
     */
    where: requisitosWhereUniqueInput
  }

  /**
   * requisitos findFirst
   */
  export type requisitosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * Filter, which requisitos to fetch.
     */
    where?: requisitosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requisitos to fetch.
     */
    orderBy?: requisitosOrderByWithRelationInput | requisitosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for requisitos.
     */
    cursor?: requisitosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requisitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requisitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of requisitos.
     */
    distinct?: RequisitosScalarFieldEnum | RequisitosScalarFieldEnum[]
  }

  /**
   * requisitos findFirstOrThrow
   */
  export type requisitosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * Filter, which requisitos to fetch.
     */
    where?: requisitosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requisitos to fetch.
     */
    orderBy?: requisitosOrderByWithRelationInput | requisitosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for requisitos.
     */
    cursor?: requisitosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requisitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requisitos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of requisitos.
     */
    distinct?: RequisitosScalarFieldEnum | RequisitosScalarFieldEnum[]
  }

  /**
   * requisitos findMany
   */
  export type requisitosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * Filter, which requisitos to fetch.
     */
    where?: requisitosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of requisitos to fetch.
     */
    orderBy?: requisitosOrderByWithRelationInput | requisitosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing requisitos.
     */
    cursor?: requisitosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` requisitos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` requisitos.
     */
    skip?: number
    distinct?: RequisitosScalarFieldEnum | RequisitosScalarFieldEnum[]
  }

  /**
   * requisitos create
   */
  export type requisitosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * The data needed to create a requisitos.
     */
    data?: XOR<requisitosCreateInput, requisitosUncheckedCreateInput>
  }

  /**
   * requisitos createMany
   */
  export type requisitosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many requisitos.
     */
    data: requisitosCreateManyInput | requisitosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * requisitos update
   */
  export type requisitosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * The data needed to update a requisitos.
     */
    data: XOR<requisitosUpdateInput, requisitosUncheckedUpdateInput>
    /**
     * Choose, which requisitos to update.
     */
    where: requisitosWhereUniqueInput
  }

  /**
   * requisitos updateMany
   */
  export type requisitosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update requisitos.
     */
    data: XOR<requisitosUpdateManyMutationInput, requisitosUncheckedUpdateManyInput>
    /**
     * Filter which requisitos to update
     */
    where?: requisitosWhereInput
  }

  /**
   * requisitos upsert
   */
  export type requisitosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * The filter to search for the requisitos to update in case it exists.
     */
    where: requisitosWhereUniqueInput
    /**
     * In case the requisitos found by the `where` argument doesn't exist, create a new requisitos with this data.
     */
    create: XOR<requisitosCreateInput, requisitosUncheckedCreateInput>
    /**
     * In case the requisitos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<requisitosUpdateInput, requisitosUncheckedUpdateInput>
  }

  /**
   * requisitos delete
   */
  export type requisitosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    /**
     * Filter which requisitos to delete.
     */
    where: requisitosWhereUniqueInput
  }

  /**
   * requisitos deleteMany
   */
  export type requisitosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which requisitos to delete
     */
    where?: requisitosWhereInput
  }

  /**
   * requisitos.vagas
   */
  export type requisitos$vagasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    where?: vagasWhereInput
  }

  /**
   * requisitos without action
   */
  export type requisitosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
  }


  /**
   * Model vagas
   */

  export type AggregateVagas = {
    _count: VagasCountAggregateOutputType | null
    _avg: VagasAvgAggregateOutputType | null
    _sum: VagasSumAggregateOutputType | null
    _min: VagasMinAggregateOutputType | null
    _max: VagasMaxAggregateOutputType | null
  }

  export type VagasAvgAggregateOutputType = {
    id: number | null
  }

  export type VagasSumAggregateOutputType = {
    id: number | null
  }

  export type VagasMinAggregateOutputType = {
    id: number | null
    nome_empresa: string | null
    logo: string | null
    data_pub: Date | null
    cargo: string | null
    descricao: string | null
    localidade: string | null
    tipo: string | null
  }

  export type VagasMaxAggregateOutputType = {
    id: number | null
    nome_empresa: string | null
    logo: string | null
    data_pub: Date | null
    cargo: string | null
    descricao: string | null
    localidade: string | null
    tipo: string | null
  }

  export type VagasCountAggregateOutputType = {
    id: number
    nome_empresa: number
    logo: number
    data_pub: number
    cargo: number
    descricao: number
    localidade: number
    tipo: number
    _all: number
  }


  export type VagasAvgAggregateInputType = {
    id?: true
  }

  export type VagasSumAggregateInputType = {
    id?: true
  }

  export type VagasMinAggregateInputType = {
    id?: true
    nome_empresa?: true
    logo?: true
    data_pub?: true
    cargo?: true
    descricao?: true
    localidade?: true
    tipo?: true
  }

  export type VagasMaxAggregateInputType = {
    id?: true
    nome_empresa?: true
    logo?: true
    data_pub?: true
    cargo?: true
    descricao?: true
    localidade?: true
    tipo?: true
  }

  export type VagasCountAggregateInputType = {
    id?: true
    nome_empresa?: true
    logo?: true
    data_pub?: true
    cargo?: true
    descricao?: true
    localidade?: true
    tipo?: true
    _all?: true
  }

  export type VagasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which vagas to aggregate.
     */
    where?: vagasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vagases to fetch.
     */
    orderBy?: vagasOrderByWithRelationInput | vagasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: vagasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vagases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vagases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned vagases
    **/
    _count?: true | VagasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VagasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VagasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VagasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VagasMaxAggregateInputType
  }

  export type GetVagasAggregateType<T extends VagasAggregateArgs> = {
        [P in keyof T & keyof AggregateVagas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVagas[P]>
      : GetScalarType<T[P], AggregateVagas[P]>
  }




  export type vagasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: vagasWhereInput
    orderBy?: vagasOrderByWithAggregationInput | vagasOrderByWithAggregationInput[]
    by: VagasScalarFieldEnum[] | VagasScalarFieldEnum
    having?: vagasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VagasCountAggregateInputType | true
    _avg?: VagasAvgAggregateInputType
    _sum?: VagasSumAggregateInputType
    _min?: VagasMinAggregateInputType
    _max?: VagasMaxAggregateInputType
  }

  export type VagasGroupByOutputType = {
    id: number
    nome_empresa: string | null
    logo: string | null
    data_pub: Date | null
    cargo: string | null
    descricao: string | null
    localidade: string | null
    tipo: string | null
    _count: VagasCountAggregateOutputType | null
    _avg: VagasAvgAggregateOutputType | null
    _sum: VagasSumAggregateOutputType | null
    _min: VagasMinAggregateOutputType | null
    _max: VagasMaxAggregateOutputType | null
  }

  type GetVagasGroupByPayload<T extends vagasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VagasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VagasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VagasGroupByOutputType[P]>
            : GetScalarType<T[P], VagasGroupByOutputType[P]>
        }
      >
    >


  export type vagasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome_empresa?: boolean
    logo?: boolean
    data_pub?: boolean
    cargo?: boolean
    descricao?: boolean
    localidade?: boolean
    tipo?: boolean
    requisitos?: boolean | vagas$requisitosArgs<ExtArgs>
    _count?: boolean | VagasCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vagas"]>

  export type vagasSelectScalar = {
    id?: boolean
    nome_empresa?: boolean
    logo?: boolean
    data_pub?: boolean
    cargo?: boolean
    descricao?: boolean
    localidade?: boolean
    tipo?: boolean
  }


  export type vagasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    requisitos?: boolean | vagas$requisitosArgs<ExtArgs>
    _count?: boolean | VagasCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $vagasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "vagas"
    objects: {
      requisitos: Prisma.$requisitosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome_empresa: string | null
      logo: string | null
      data_pub: Date | null
      cargo: string | null
      descricao: string | null
      localidade: string | null
      tipo: string | null
    }, ExtArgs["result"]["vagas"]>
    composites: {}
  }


  type vagasGetPayload<S extends boolean | null | undefined | vagasDefaultArgs> = $Result.GetResult<Prisma.$vagasPayload, S>

  type vagasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<vagasFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VagasCountAggregateInputType | true
    }

  export interface vagasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['vagas'], meta: { name: 'vagas' } }
    /**
     * Find zero or one Vagas that matches the filter.
     * @param {vagasFindUniqueArgs} args - Arguments to find a Vagas
     * @example
     * // Get one Vagas
     * const vagas = await prisma.vagas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends vagasFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, vagasFindUniqueArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Vagas that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {vagasFindUniqueOrThrowArgs} args - Arguments to find a Vagas
     * @example
     * // Get one Vagas
     * const vagas = await prisma.vagas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends vagasFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, vagasFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Vagas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vagasFindFirstArgs} args - Arguments to find a Vagas
     * @example
     * // Get one Vagas
     * const vagas = await prisma.vagas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends vagasFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, vagasFindFirstArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Vagas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vagasFindFirstOrThrowArgs} args - Arguments to find a Vagas
     * @example
     * // Get one Vagas
     * const vagas = await prisma.vagas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends vagasFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, vagasFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Vagases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vagasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vagases
     * const vagases = await prisma.vagas.findMany()
     * 
     * // Get first 10 Vagases
     * const vagases = await prisma.vagas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vagasWithIdOnly = await prisma.vagas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends vagasFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, vagasFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Vagas.
     * @param {vagasCreateArgs} args - Arguments to create a Vagas.
     * @example
     * // Create one Vagas
     * const Vagas = await prisma.vagas.create({
     *   data: {
     *     // ... data to create a Vagas
     *   }
     * })
     * 
    **/
    create<T extends vagasCreateArgs<ExtArgs>>(
      args: SelectSubset<T, vagasCreateArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Vagases.
     *     @param {vagasCreateManyArgs} args - Arguments to create many Vagases.
     *     @example
     *     // Create many Vagases
     *     const vagas = await prisma.vagas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends vagasCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, vagasCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Vagas.
     * @param {vagasDeleteArgs} args - Arguments to delete one Vagas.
     * @example
     * // Delete one Vagas
     * const Vagas = await prisma.vagas.delete({
     *   where: {
     *     // ... filter to delete one Vagas
     *   }
     * })
     * 
    **/
    delete<T extends vagasDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, vagasDeleteArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Vagas.
     * @param {vagasUpdateArgs} args - Arguments to update one Vagas.
     * @example
     * // Update one Vagas
     * const vagas = await prisma.vagas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends vagasUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, vagasUpdateArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Vagases.
     * @param {vagasDeleteManyArgs} args - Arguments to filter Vagases to delete.
     * @example
     * // Delete a few Vagases
     * const { count } = await prisma.vagas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends vagasDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, vagasDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vagases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vagasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vagases
     * const vagas = await prisma.vagas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends vagasUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, vagasUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Vagas.
     * @param {vagasUpsertArgs} args - Arguments to update or create a Vagas.
     * @example
     * // Update or create a Vagas
     * const vagas = await prisma.vagas.upsert({
     *   create: {
     *     // ... data to create a Vagas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vagas we want to update
     *   }
     * })
    **/
    upsert<T extends vagasUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, vagasUpsertArgs<ExtArgs>>
    ): Prisma__vagasClient<$Result.GetResult<Prisma.$vagasPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Vagases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vagasCountArgs} args - Arguments to filter Vagases to count.
     * @example
     * // Count the number of Vagases
     * const count = await prisma.vagas.count({
     *   where: {
     *     // ... the filter for the Vagases we want to count
     *   }
     * })
    **/
    count<T extends vagasCountArgs>(
      args?: Subset<T, vagasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VagasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vagas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VagasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VagasAggregateArgs>(args: Subset<T, VagasAggregateArgs>): Prisma.PrismaPromise<GetVagasAggregateType<T>>

    /**
     * Group by Vagas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {vagasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends vagasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: vagasGroupByArgs['orderBy'] }
        : { orderBy?: vagasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, vagasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVagasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the vagas model
   */
  readonly fields: vagasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for vagas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__vagasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    requisitos<T extends vagas$requisitosArgs<ExtArgs> = {}>(args?: Subset<T, vagas$requisitosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$requisitosPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the vagas model
   */ 
  interface vagasFieldRefs {
    readonly id: FieldRef<"vagas", 'Int'>
    readonly nome_empresa: FieldRef<"vagas", 'String'>
    readonly logo: FieldRef<"vagas", 'String'>
    readonly data_pub: FieldRef<"vagas", 'DateTime'>
    readonly cargo: FieldRef<"vagas", 'String'>
    readonly descricao: FieldRef<"vagas", 'String'>
    readonly localidade: FieldRef<"vagas", 'String'>
    readonly tipo: FieldRef<"vagas", 'String'>
  }
    

  // Custom InputTypes
  /**
   * vagas findUnique
   */
  export type vagasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * Filter, which vagas to fetch.
     */
    where: vagasWhereUniqueInput
  }

  /**
   * vagas findUniqueOrThrow
   */
  export type vagasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * Filter, which vagas to fetch.
     */
    where: vagasWhereUniqueInput
  }

  /**
   * vagas findFirst
   */
  export type vagasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * Filter, which vagas to fetch.
     */
    where?: vagasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vagases to fetch.
     */
    orderBy?: vagasOrderByWithRelationInput | vagasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vagases.
     */
    cursor?: vagasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vagases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vagases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vagases.
     */
    distinct?: VagasScalarFieldEnum | VagasScalarFieldEnum[]
  }

  /**
   * vagas findFirstOrThrow
   */
  export type vagasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * Filter, which vagas to fetch.
     */
    where?: vagasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vagases to fetch.
     */
    orderBy?: vagasOrderByWithRelationInput | vagasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for vagases.
     */
    cursor?: vagasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vagases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vagases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of vagases.
     */
    distinct?: VagasScalarFieldEnum | VagasScalarFieldEnum[]
  }

  /**
   * vagas findMany
   */
  export type vagasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * Filter, which vagases to fetch.
     */
    where?: vagasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of vagases to fetch.
     */
    orderBy?: vagasOrderByWithRelationInput | vagasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing vagases.
     */
    cursor?: vagasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` vagases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` vagases.
     */
    skip?: number
    distinct?: VagasScalarFieldEnum | VagasScalarFieldEnum[]
  }

  /**
   * vagas create
   */
  export type vagasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * The data needed to create a vagas.
     */
    data?: XOR<vagasCreateInput, vagasUncheckedCreateInput>
  }

  /**
   * vagas createMany
   */
  export type vagasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many vagases.
     */
    data: vagasCreateManyInput | vagasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * vagas update
   */
  export type vagasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * The data needed to update a vagas.
     */
    data: XOR<vagasUpdateInput, vagasUncheckedUpdateInput>
    /**
     * Choose, which vagas to update.
     */
    where: vagasWhereUniqueInput
  }

  /**
   * vagas updateMany
   */
  export type vagasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update vagases.
     */
    data: XOR<vagasUpdateManyMutationInput, vagasUncheckedUpdateManyInput>
    /**
     * Filter which vagases to update
     */
    where?: vagasWhereInput
  }

  /**
   * vagas upsert
   */
  export type vagasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * The filter to search for the vagas to update in case it exists.
     */
    where: vagasWhereUniqueInput
    /**
     * In case the vagas found by the `where` argument doesn't exist, create a new vagas with this data.
     */
    create: XOR<vagasCreateInput, vagasUncheckedCreateInput>
    /**
     * In case the vagas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<vagasUpdateInput, vagasUncheckedUpdateInput>
  }

  /**
   * vagas delete
   */
  export type vagasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
    /**
     * Filter which vagas to delete.
     */
    where: vagasWhereUniqueInput
  }

  /**
   * vagas deleteMany
   */
  export type vagasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which vagases to delete
     */
    where?: vagasWhereInput
  }

  /**
   * vagas.requisitos
   */
  export type vagas$requisitosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the requisitos
     */
    select?: requisitosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: requisitosInclude<ExtArgs> | null
    where?: requisitosWhereInput
    orderBy?: requisitosOrderByWithRelationInput | requisitosOrderByWithRelationInput[]
    cursor?: requisitosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RequisitosScalarFieldEnum | RequisitosScalarFieldEnum[]
  }

  /**
   * vagas without action
   */
  export type vagasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the vagas
     */
    select?: vagasSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: vagasInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RequisitosScalarFieldEnum: {
    id: 'id',
    vaga_id: 'vaga_id',
    requisito: 'requisito'
  };

  export type RequisitosScalarFieldEnum = (typeof RequisitosScalarFieldEnum)[keyof typeof RequisitosScalarFieldEnum]


  export const VagasScalarFieldEnum: {
    id: 'id',
    nome_empresa: 'nome_empresa',
    logo: 'logo',
    data_pub: 'data_pub',
    cargo: 'cargo',
    descricao: 'descricao',
    localidade: 'localidade',
    tipo: 'tipo'
  };

  export type VagasScalarFieldEnum = (typeof VagasScalarFieldEnum)[keyof typeof VagasScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type requisitosWhereInput = {
    AND?: requisitosWhereInput | requisitosWhereInput[]
    OR?: requisitosWhereInput[]
    NOT?: requisitosWhereInput | requisitosWhereInput[]
    id?: IntFilter<"requisitos"> | number
    vaga_id?: IntNullableFilter<"requisitos"> | number | null
    requisito?: StringNullableFilter<"requisitos"> | string | null
    vagas?: XOR<VagasNullableRelationFilter, vagasWhereInput> | null
  }

  export type requisitosOrderByWithRelationInput = {
    id?: SortOrder
    vaga_id?: SortOrderInput | SortOrder
    requisito?: SortOrderInput | SortOrder
    vagas?: vagasOrderByWithRelationInput
  }

  export type requisitosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: requisitosWhereInput | requisitosWhereInput[]
    OR?: requisitosWhereInput[]
    NOT?: requisitosWhereInput | requisitosWhereInput[]
    vaga_id?: IntNullableFilter<"requisitos"> | number | null
    requisito?: StringNullableFilter<"requisitos"> | string | null
    vagas?: XOR<VagasNullableRelationFilter, vagasWhereInput> | null
  }, "id">

  export type requisitosOrderByWithAggregationInput = {
    id?: SortOrder
    vaga_id?: SortOrderInput | SortOrder
    requisito?: SortOrderInput | SortOrder
    _count?: requisitosCountOrderByAggregateInput
    _avg?: requisitosAvgOrderByAggregateInput
    _max?: requisitosMaxOrderByAggregateInput
    _min?: requisitosMinOrderByAggregateInput
    _sum?: requisitosSumOrderByAggregateInput
  }

  export type requisitosScalarWhereWithAggregatesInput = {
    AND?: requisitosScalarWhereWithAggregatesInput | requisitosScalarWhereWithAggregatesInput[]
    OR?: requisitosScalarWhereWithAggregatesInput[]
    NOT?: requisitosScalarWhereWithAggregatesInput | requisitosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"requisitos"> | number
    vaga_id?: IntNullableWithAggregatesFilter<"requisitos"> | number | null
    requisito?: StringNullableWithAggregatesFilter<"requisitos"> | string | null
  }

  export type vagasWhereInput = {
    AND?: vagasWhereInput | vagasWhereInput[]
    OR?: vagasWhereInput[]
    NOT?: vagasWhereInput | vagasWhereInput[]
    id?: IntFilter<"vagas"> | number
    nome_empresa?: StringNullableFilter<"vagas"> | string | null
    logo?: StringNullableFilter<"vagas"> | string | null
    data_pub?: DateTimeNullableFilter<"vagas"> | Date | string | null
    cargo?: StringNullableFilter<"vagas"> | string | null
    descricao?: StringNullableFilter<"vagas"> | string | null
    localidade?: StringNullableFilter<"vagas"> | string | null
    tipo?: StringNullableFilter<"vagas"> | string | null
    requisitos?: RequisitosListRelationFilter
  }

  export type vagasOrderByWithRelationInput = {
    id?: SortOrder
    nome_empresa?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    data_pub?: SortOrderInput | SortOrder
    cargo?: SortOrderInput | SortOrder
    descricao?: SortOrderInput | SortOrder
    localidade?: SortOrderInput | SortOrder
    tipo?: SortOrderInput | SortOrder
    requisitos?: requisitosOrderByRelationAggregateInput
  }

  export type vagasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: vagasWhereInput | vagasWhereInput[]
    OR?: vagasWhereInput[]
    NOT?: vagasWhereInput | vagasWhereInput[]
    nome_empresa?: StringNullableFilter<"vagas"> | string | null
    logo?: StringNullableFilter<"vagas"> | string | null
    data_pub?: DateTimeNullableFilter<"vagas"> | Date | string | null
    cargo?: StringNullableFilter<"vagas"> | string | null
    descricao?: StringNullableFilter<"vagas"> | string | null
    localidade?: StringNullableFilter<"vagas"> | string | null
    tipo?: StringNullableFilter<"vagas"> | string | null
    requisitos?: RequisitosListRelationFilter
  }, "id">

  export type vagasOrderByWithAggregationInput = {
    id?: SortOrder
    nome_empresa?: SortOrderInput | SortOrder
    logo?: SortOrderInput | SortOrder
    data_pub?: SortOrderInput | SortOrder
    cargo?: SortOrderInput | SortOrder
    descricao?: SortOrderInput | SortOrder
    localidade?: SortOrderInput | SortOrder
    tipo?: SortOrderInput | SortOrder
    _count?: vagasCountOrderByAggregateInput
    _avg?: vagasAvgOrderByAggregateInput
    _max?: vagasMaxOrderByAggregateInput
    _min?: vagasMinOrderByAggregateInput
    _sum?: vagasSumOrderByAggregateInput
  }

  export type vagasScalarWhereWithAggregatesInput = {
    AND?: vagasScalarWhereWithAggregatesInput | vagasScalarWhereWithAggregatesInput[]
    OR?: vagasScalarWhereWithAggregatesInput[]
    NOT?: vagasScalarWhereWithAggregatesInput | vagasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"vagas"> | number
    nome_empresa?: StringNullableWithAggregatesFilter<"vagas"> | string | null
    logo?: StringNullableWithAggregatesFilter<"vagas"> | string | null
    data_pub?: DateTimeNullableWithAggregatesFilter<"vagas"> | Date | string | null
    cargo?: StringNullableWithAggregatesFilter<"vagas"> | string | null
    descricao?: StringNullableWithAggregatesFilter<"vagas"> | string | null
    localidade?: StringNullableWithAggregatesFilter<"vagas"> | string | null
    tipo?: StringNullableWithAggregatesFilter<"vagas"> | string | null
  }

  export type requisitosCreateInput = {
    requisito?: string | null
    vagas?: vagasCreateNestedOneWithoutRequisitosInput
  }

  export type requisitosUncheckedCreateInput = {
    id?: number
    vaga_id?: number | null
    requisito?: string | null
  }

  export type requisitosUpdateInput = {
    requisito?: NullableStringFieldUpdateOperationsInput | string | null
    vagas?: vagasUpdateOneWithoutRequisitosNestedInput
  }

  export type requisitosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaga_id?: NullableIntFieldUpdateOperationsInput | number | null
    requisito?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type requisitosCreateManyInput = {
    id?: number
    vaga_id?: number | null
    requisito?: string | null
  }

  export type requisitosUpdateManyMutationInput = {
    requisito?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type requisitosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    vaga_id?: NullableIntFieldUpdateOperationsInput | number | null
    requisito?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type vagasCreateInput = {
    nome_empresa?: string | null
    logo?: string | null
    data_pub?: Date | string | null
    cargo?: string | null
    descricao?: string | null
    localidade?: string | null
    tipo?: string | null
    requisitos?: requisitosCreateNestedManyWithoutVagasInput
  }

  export type vagasUncheckedCreateInput = {
    id?: number
    nome_empresa?: string | null
    logo?: string | null
    data_pub?: Date | string | null
    cargo?: string | null
    descricao?: string | null
    localidade?: string | null
    tipo?: string | null
    requisitos?: requisitosUncheckedCreateNestedManyWithoutVagasInput
  }

  export type vagasUpdateInput = {
    nome_empresa?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    data_pub?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    localidade?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    requisitos?: requisitosUpdateManyWithoutVagasNestedInput
  }

  export type vagasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_empresa?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    data_pub?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    localidade?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
    requisitos?: requisitosUncheckedUpdateManyWithoutVagasNestedInput
  }

  export type vagasCreateManyInput = {
    id?: number
    nome_empresa?: string | null
    logo?: string | null
    data_pub?: Date | string | null
    cargo?: string | null
    descricao?: string | null
    localidade?: string | null
    tipo?: string | null
  }

  export type vagasUpdateManyMutationInput = {
    nome_empresa?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    data_pub?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    localidade?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type vagasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_empresa?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    data_pub?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    localidade?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type VagasNullableRelationFilter = {
    is?: vagasWhereInput | null
    isNot?: vagasWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type requisitosCountOrderByAggregateInput = {
    id?: SortOrder
    vaga_id?: SortOrder
    requisito?: SortOrder
  }

  export type requisitosAvgOrderByAggregateInput = {
    id?: SortOrder
    vaga_id?: SortOrder
  }

  export type requisitosMaxOrderByAggregateInput = {
    id?: SortOrder
    vaga_id?: SortOrder
    requisito?: SortOrder
  }

  export type requisitosMinOrderByAggregateInput = {
    id?: SortOrder
    vaga_id?: SortOrder
    requisito?: SortOrder
  }

  export type requisitosSumOrderByAggregateInput = {
    id?: SortOrder
    vaga_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type RequisitosListRelationFilter = {
    every?: requisitosWhereInput
    some?: requisitosWhereInput
    none?: requisitosWhereInput
  }

  export type requisitosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type vagasCountOrderByAggregateInput = {
    id?: SortOrder
    nome_empresa?: SortOrder
    logo?: SortOrder
    data_pub?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    localidade?: SortOrder
    tipo?: SortOrder
  }

  export type vagasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type vagasMaxOrderByAggregateInput = {
    id?: SortOrder
    nome_empresa?: SortOrder
    logo?: SortOrder
    data_pub?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    localidade?: SortOrder
    tipo?: SortOrder
  }

  export type vagasMinOrderByAggregateInput = {
    id?: SortOrder
    nome_empresa?: SortOrder
    logo?: SortOrder
    data_pub?: SortOrder
    cargo?: SortOrder
    descricao?: SortOrder
    localidade?: SortOrder
    tipo?: SortOrder
  }

  export type vagasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type vagasCreateNestedOneWithoutRequisitosInput = {
    create?: XOR<vagasCreateWithoutRequisitosInput, vagasUncheckedCreateWithoutRequisitosInput>
    connectOrCreate?: vagasCreateOrConnectWithoutRequisitosInput
    connect?: vagasWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type vagasUpdateOneWithoutRequisitosNestedInput = {
    create?: XOR<vagasCreateWithoutRequisitosInput, vagasUncheckedCreateWithoutRequisitosInput>
    connectOrCreate?: vagasCreateOrConnectWithoutRequisitosInput
    upsert?: vagasUpsertWithoutRequisitosInput
    disconnect?: vagasWhereInput | boolean
    delete?: vagasWhereInput | boolean
    connect?: vagasWhereUniqueInput
    update?: XOR<XOR<vagasUpdateToOneWithWhereWithoutRequisitosInput, vagasUpdateWithoutRequisitosInput>, vagasUncheckedUpdateWithoutRequisitosInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type requisitosCreateNestedManyWithoutVagasInput = {
    create?: XOR<requisitosCreateWithoutVagasInput, requisitosUncheckedCreateWithoutVagasInput> | requisitosCreateWithoutVagasInput[] | requisitosUncheckedCreateWithoutVagasInput[]
    connectOrCreate?: requisitosCreateOrConnectWithoutVagasInput | requisitosCreateOrConnectWithoutVagasInput[]
    createMany?: requisitosCreateManyVagasInputEnvelope
    connect?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
  }

  export type requisitosUncheckedCreateNestedManyWithoutVagasInput = {
    create?: XOR<requisitosCreateWithoutVagasInput, requisitosUncheckedCreateWithoutVagasInput> | requisitosCreateWithoutVagasInput[] | requisitosUncheckedCreateWithoutVagasInput[]
    connectOrCreate?: requisitosCreateOrConnectWithoutVagasInput | requisitosCreateOrConnectWithoutVagasInput[]
    createMany?: requisitosCreateManyVagasInputEnvelope
    connect?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type requisitosUpdateManyWithoutVagasNestedInput = {
    create?: XOR<requisitosCreateWithoutVagasInput, requisitosUncheckedCreateWithoutVagasInput> | requisitosCreateWithoutVagasInput[] | requisitosUncheckedCreateWithoutVagasInput[]
    connectOrCreate?: requisitosCreateOrConnectWithoutVagasInput | requisitosCreateOrConnectWithoutVagasInput[]
    upsert?: requisitosUpsertWithWhereUniqueWithoutVagasInput | requisitosUpsertWithWhereUniqueWithoutVagasInput[]
    createMany?: requisitosCreateManyVagasInputEnvelope
    set?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    disconnect?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    delete?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    connect?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    update?: requisitosUpdateWithWhereUniqueWithoutVagasInput | requisitosUpdateWithWhereUniqueWithoutVagasInput[]
    updateMany?: requisitosUpdateManyWithWhereWithoutVagasInput | requisitosUpdateManyWithWhereWithoutVagasInput[]
    deleteMany?: requisitosScalarWhereInput | requisitosScalarWhereInput[]
  }

  export type requisitosUncheckedUpdateManyWithoutVagasNestedInput = {
    create?: XOR<requisitosCreateWithoutVagasInput, requisitosUncheckedCreateWithoutVagasInput> | requisitosCreateWithoutVagasInput[] | requisitosUncheckedCreateWithoutVagasInput[]
    connectOrCreate?: requisitosCreateOrConnectWithoutVagasInput | requisitosCreateOrConnectWithoutVagasInput[]
    upsert?: requisitosUpsertWithWhereUniqueWithoutVagasInput | requisitosUpsertWithWhereUniqueWithoutVagasInput[]
    createMany?: requisitosCreateManyVagasInputEnvelope
    set?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    disconnect?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    delete?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    connect?: requisitosWhereUniqueInput | requisitosWhereUniqueInput[]
    update?: requisitosUpdateWithWhereUniqueWithoutVagasInput | requisitosUpdateWithWhereUniqueWithoutVagasInput[]
    updateMany?: requisitosUpdateManyWithWhereWithoutVagasInput | requisitosUpdateManyWithWhereWithoutVagasInput[]
    deleteMany?: requisitosScalarWhereInput | requisitosScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type vagasCreateWithoutRequisitosInput = {
    nome_empresa?: string | null
    logo?: string | null
    data_pub?: Date | string | null
    cargo?: string | null
    descricao?: string | null
    localidade?: string | null
    tipo?: string | null
  }

  export type vagasUncheckedCreateWithoutRequisitosInput = {
    id?: number
    nome_empresa?: string | null
    logo?: string | null
    data_pub?: Date | string | null
    cargo?: string | null
    descricao?: string | null
    localidade?: string | null
    tipo?: string | null
  }

  export type vagasCreateOrConnectWithoutRequisitosInput = {
    where: vagasWhereUniqueInput
    create: XOR<vagasCreateWithoutRequisitosInput, vagasUncheckedCreateWithoutRequisitosInput>
  }

  export type vagasUpsertWithoutRequisitosInput = {
    update: XOR<vagasUpdateWithoutRequisitosInput, vagasUncheckedUpdateWithoutRequisitosInput>
    create: XOR<vagasCreateWithoutRequisitosInput, vagasUncheckedCreateWithoutRequisitosInput>
    where?: vagasWhereInput
  }

  export type vagasUpdateToOneWithWhereWithoutRequisitosInput = {
    where?: vagasWhereInput
    data: XOR<vagasUpdateWithoutRequisitosInput, vagasUncheckedUpdateWithoutRequisitosInput>
  }

  export type vagasUpdateWithoutRequisitosInput = {
    nome_empresa?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    data_pub?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    localidade?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type vagasUncheckedUpdateWithoutRequisitosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome_empresa?: NullableStringFieldUpdateOperationsInput | string | null
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    data_pub?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cargo?: NullableStringFieldUpdateOperationsInput | string | null
    descricao?: NullableStringFieldUpdateOperationsInput | string | null
    localidade?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type requisitosCreateWithoutVagasInput = {
    requisito?: string | null
  }

  export type requisitosUncheckedCreateWithoutVagasInput = {
    id?: number
    requisito?: string | null
  }

  export type requisitosCreateOrConnectWithoutVagasInput = {
    where: requisitosWhereUniqueInput
    create: XOR<requisitosCreateWithoutVagasInput, requisitosUncheckedCreateWithoutVagasInput>
  }

  export type requisitosCreateManyVagasInputEnvelope = {
    data: requisitosCreateManyVagasInput | requisitosCreateManyVagasInput[]
    skipDuplicates?: boolean
  }

  export type requisitosUpsertWithWhereUniqueWithoutVagasInput = {
    where: requisitosWhereUniqueInput
    update: XOR<requisitosUpdateWithoutVagasInput, requisitosUncheckedUpdateWithoutVagasInput>
    create: XOR<requisitosCreateWithoutVagasInput, requisitosUncheckedCreateWithoutVagasInput>
  }

  export type requisitosUpdateWithWhereUniqueWithoutVagasInput = {
    where: requisitosWhereUniqueInput
    data: XOR<requisitosUpdateWithoutVagasInput, requisitosUncheckedUpdateWithoutVagasInput>
  }

  export type requisitosUpdateManyWithWhereWithoutVagasInput = {
    where: requisitosScalarWhereInput
    data: XOR<requisitosUpdateManyMutationInput, requisitosUncheckedUpdateManyWithoutVagasInput>
  }

  export type requisitosScalarWhereInput = {
    AND?: requisitosScalarWhereInput | requisitosScalarWhereInput[]
    OR?: requisitosScalarWhereInput[]
    NOT?: requisitosScalarWhereInput | requisitosScalarWhereInput[]
    id?: IntFilter<"requisitos"> | number
    vaga_id?: IntNullableFilter<"requisitos"> | number | null
    requisito?: StringNullableFilter<"requisitos"> | string | null
  }

  export type requisitosCreateManyVagasInput = {
    id?: number
    requisito?: string | null
  }

  export type requisitosUpdateWithoutVagasInput = {
    requisito?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type requisitosUncheckedUpdateWithoutVagasInput = {
    id?: IntFieldUpdateOperationsInput | number
    requisito?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type requisitosUncheckedUpdateManyWithoutVagasInput = {
    id?: IntFieldUpdateOperationsInput | number
    requisito?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use VagasCountOutputTypeDefaultArgs instead
     */
    export type VagasCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VagasCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use requisitosDefaultArgs instead
     */
    export type requisitosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = requisitosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use vagasDefaultArgs instead
     */
    export type vagasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = vagasDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}