{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madru\\\\OneDrive\\\\Documentos\\\\DevJobs App\\\\devjobs-app\\\\src\\\\containers\\\\Home\\\\Jobs.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { format, setWeek } from 'date-fns';\nimport Card from 'react-bootstrap/Card';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Jobs = () => {\n  _s();\n  const [vagas, setVagas] = useState([]);\n  const [requisitos, setRequisitos] = useState([]);\n  const [aguardar, setAguardar] = useState(false);\n  useEffect(() => {\n    const fetchVagas = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/');\n        setVagas(response.data);\n      } catch (error) {\n        console.error('Erro ao buscar vagas:', error);\n      }\n    };\n    fetchVagas();\n    setAguardar;\n  }, []);\n  useEffect(() => {\n    const fetchRequisitos = async idreq => {\n      try {\n        const response = await axios.get(`http://localhost:3000/requisitos/:id${idreq}`);\n        setRequisitos(response.data);\n        console.log(requisitos);\n      } catch (error) {\n        console.error('Erro ao buscar requisitos:', error);\n        throw error;\n      }\n    };\n    vagas.map((vaga, index) => fetchRequisitos(index));\n  }, []);\n  const separarRequisitos = async index => {\n    await new Promise(resolve => {\n      const interval = setInterval(() => {\n        if (aguardar) {\n          clearInterval(interval);\n          resolve();\n        }\n      }, 100);\n    });\n    console.log(\"deu certo\");\n\n    // requisitos.map((req, index) => {\n    //   console.log(req.vaga_id)\n    //   console.log(index)\n\n    //   if(req.vaga_id == index){\n    //     console.log(\"Olha é: \" + req.vaga_id)\n    //   } else{\n    //     console.log(\"esse num é\")\n    //   }\n    // })\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: vagas.map((vaga, index) => /*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        width: '22rem',\n        height: '18rem'\n      },\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://via.placeholder.com/50\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 34\n          }, this), \" \", vaga.nome_empresa]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Title, {\n          children: [\" \", vaga.cargo]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Subtitle, {\n          className: \"mb-2 text-muted\",\n          children: [format(new Date(vaga.data_pub), 'dd-MM-yyyy'), \" - \", vaga.localidade]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: separarRequisitos(index)\n            /* {\r\n            \r\n            vaga.requisitos.map((requisito, index) => (\r\n                <li key={index}>{requisito}</li>\r\n            ))} */\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this))\n  }, void 0, false);\n};\n_s(Jobs, \"WYzlyLXHdbNfaDlA97QUNBFEt34=\");\n_c = Jobs;\nexport default Jobs;\nvar _c;\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"names":["React","useEffect","useState","axios","format","setWeek","Card","jsxDEV","_jsxDEV","Fragment","_Fragment","Jobs","_s","vagas","setVagas","requisitos","setRequisitos","aguardar","setAguardar","fetchVagas","response","get","data","error","console","fetchRequisitos","idreq","log","map","vaga","index","separarRequisitos","Promise","resolve","interval","setInterval","clearInterval","children","style","width","height","Body","Title","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","nome_empresa","cargo","Subtitle","className","Date","data_pub","localidade","Text","_c","$RefreshReg$"],"sources":["C:/Users/madru/OneDrive/Documentos/DevJobs App/devjobs-app/src/containers/Home/Jobs.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { format, setWeek } from 'date-fns';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst Jobs = () => {\r\n\r\nconst [vagas, setVagas] = useState([])\r\nconst [requisitos, setRequisitos] = useState([])\r\nconst [aguardar, setAguardar] = useState(false)\r\n\r\n\r\nuseEffect(() => {\r\n\r\n  const fetchVagas = async () =>{\r\n    try{\r\n        const response = await axios.get('http://localhost:3000/')\r\n        setVagas(response.data)\r\n    }\r\n    catch(error){\r\n        console.error('Erro ao buscar vagas:', error)\r\n    }\r\n}\r\n  fetchVagas()\r\n  setAguardar\r\n}, [])\r\n\r\n\r\n\r\nuseEffect(() => {\r\n\r\n  const fetchRequisitos = async(idreq) => {\r\n    try{\r\n        const response = await axios.get(`http://localhost:3000/requisitos/:id${idreq}`)\r\n        setRequisitos(response.data)\r\n        console.log(requisitos)\r\n        \r\n    } catch(error){\r\n        console.error('Erro ao buscar requisitos:', error)\r\n        throw error;\r\n    }\r\n    \r\n   }\r\n\r\n\r\n   vagas.map((vaga, index) => (\r\n    fetchRequisitos(index)\r\n  ))\r\n\r\n}, [])\r\n\r\n\r\nconst separarRequisitos = async(index) =>{ \r\n\r\n await new Promise(resolve => {\r\n    const interval = setInterval(() =>{\r\n      if(aguardar){\r\n        clearInterval(interval)\r\n        resolve()\r\n      }\r\n    },100)\r\n })\r\n\r\n console.log(\"deu certo\")\r\n\r\n\r\n\r\n  // requisitos.map((req, index) => {\r\n  //   console.log(req.vaga_id)\r\n  //   console.log(index)\r\n    \r\n  //   if(req.vaga_id == index){\r\n  //     console.log(\"Olha é: \" + req.vaga_id)\r\n  //   } else{\r\n  //     console.log(\"esse num é\")\r\n  //   }\r\n  // })\r\n\r\n}\r\n\r\n    return(\r\n        <>\r\n             {\r\n             \r\n             vagas.map((vaga, index) => (\r\n\r\n              \r\n\r\n                <Card style={{ width: '22rem', height: '18rem'}} key={index}>\r\n                <Card.Body>\r\n                    <Card.Title> <img src=\"https://via.placeholder.com/50\" alt=\"\" /> {vaga.nome_empresa}</Card.Title>\r\n                    <Card.Title> {vaga.cargo}</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">{format(new Date(vaga.data_pub), 'dd-MM-yyyy')} - {vaga.localidade}</Card.Subtitle>\r\n                    <Card.Text>\r\n                       \r\n                            <ul>\r\n                                {\r\n                                separarRequisitos(index)\r\n                                /* {\r\n                                \r\n                                vaga.requisitos.map((requisito, index) => (\r\n                                    <li key={index}>{requisito}</li>\r\n                                ))} */}\r\n                            </ul>\r\n\r\n                        {/* <ReadMoreReact text={vaga.descricao} \r\n                        min={100}\r\n                        ideal={100}\r\n                        max={800}\r\n                        readMoreText={\r\n                        <Card.Link>Ver mais</Card.Link>\r\n                    }\r\n                        ></ReadMoreReact> */}\r\n                        \r\n                        \r\n                        </Card.Text> \r\n                    \r\n                </Card.Body>\r\n                </Card>\r\n                \r\n                \r\n             ))}\r\n                \r\n                \r\n             \r\n\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Jobs"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}